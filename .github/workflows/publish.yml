name: Release on Tag

on:
  push:
    tags:
      - '*' # Listen for any tag push events

jobs:
  build-and-release:
    runs-on: macos-latest

    # permissions: # Add this permissions block
    #   contents: write
    #   packages: write
    #   issues: write
    #   pull-requests: write

    permissions: write-all

    steps:
    # Check out the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Node.js and Yarn environment
    - name: Setup Node.js and Yarn
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'yarn'

    - name: 🔐 Setup Temporary Keychain and Import Certificate
      run: |
        KEYCHAIN_NAME="temp.keychain"

        # 1. Create a new temporary keychain
        security create-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} $KEYCHAIN_NAME

        # 2. Set the new keychain as the default for the session
        security default-keychain -s $KEYCHAIN_NAME
        security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} $KEYCHAIN_NAME

        # 3. Increase the keychain search timeout
        security set-keychain-settings -t 3600 $KEYCHAIN_NAME

        # 4. Decode the P12 file content from the secret and save it to a file
        echo "${{ secrets.DEV_ID_CERTIFICATE_P12 }}" | base64 --decode > dev_cert.p12

        # 5. Import the certificate and private key into the new keychain
        security import dev_cert.p12 -k $KEYCHAIN_NAME -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/security

        # 6. Set the partition list to ensure automated tools can access the key
        #    This is crucial for CI environments.
        CERT_ID='Developer ID Application: Ontology Foundation Ltd (29B4VVVVKM)' # <-- Replace with your exact Identity name
        security set-key-partition-list -S apple-tool: -S apple: -k $KEYCHAIN_NAME -p ${{ secrets.KEYCHAIN_PASSWORD }}


    # Install dependencies
    - name: Install dependencies
      run: |
        yarn install

    # # Build all packages (macOS, Linux, and Windows)
    - name: Build macos packages
      run: |
        yarn build:mac

    - name: Build Windows App
      # if: matrix.os == 'windows-latest'
      run: |
        yarn build:win

    - name: Build Linux App
      # if: matrix.os == 'ubuntu-latest'
      run: |
        yarn build:linux

    # - name: Create Release v1
    #   id: create_release
    #   uses: actions/create-release@latest
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     body: |
    #       Change Log
    #       - TODO
    #     draft: false
    #     prerelease: false


    # --- Cleanup ---
    - name: 🗑️ Clean Up Keychain and Files
      if: always() # Ensure cleanup runs even on failure
      run: |
        security delete-keychain temp.keychain
        rm dev_cert.p12


    - name: Generate Checksums
      run: |
        brew install coreutils
        #echo "# OWallet ${{ github.ref_name }}" > CHECKSUMS.md
        echo "" > CHECKSUMS.md
        echo "CHANGELOG: $(git log -1 --format=%s ${{ github.ref_name }})" >> CHECKSUMS.md
        echo "## SHA256 Checksums" >> CHECKSUMS.md
        echo "| File | SHA256 Checksum |" >> CHECKSUMS.md
        echo "|------|----------------|" >> CHECKSUMS.md
        # find dist_electron/ -type f -name OWallet\*.AppImage -o -name OWallet\*.dmg -o -name OWallet\*.exe -o -name OWallet\*.deb -exec sh -c '
        #   for file; do
        #     echo "| $(basename "$file") | \`$(sha256sum "$file" | cut -d " " -f1)\` |" >> CHECKSUMS.md
        #   done
        # ' sh {} +
        echo "| $(ls dist_electron/OWallet-*.deb | sed -e 's#dist_electron/##') | \`$(sha256sum dist_electron/OWallet-*.deb | cut -d " " -f1)\` |" >> CHECKSUMS.md
        echo "| $(ls dist_electron/OWallet-*.exe | sed -e 's#dist_electron/##') | \`$(sha256sum dist_electron/OWallet-*.exe | cut -d " " -f1)\` |" >> CHECKSUMS.md
        echo "| $(ls dist_electron/OWallet-*.AppImage | sed -e 's#dist_electron/##') | \`$(sha256sum dist_electron/OWallet-*.AppImage | cut -d " " -f1)\` |" >> CHECKSUMS.md
        for dmg in dist_electron/OWallet-*.dmg; do
          echo "| $(basename "$dmg") | \`$(sha256sum "$dmg" | cut -d " " -f1)\` |" >> CHECKSUMS.md
        done

    - name: Create Release v2
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body_path: CHECKSUMS.md
        files: |
          dist_electron/*.deb
          dist_electron/*.AppImage
          dist_electron/*.dmg
          dist_electron/*.exe


    # - name: Release with attachment
    #   uses: softprops/action-gh-release@v1
    #   if: startsWith(github.ref, 'refs/tags/')
    #   with:
    #     files: |
    #       dist_electron/*.deb
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
